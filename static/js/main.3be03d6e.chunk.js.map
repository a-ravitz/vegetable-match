{"version":3,"sources":["components/Header/Header.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","score","topScore","react_default","a","createElement","className","Card","src","id","clickCount","onClick","alt","data-id","images","Object","toConsumableArray","Images","console","log","App","state","gameOver","_this","setState","this","forEach","count","alert","concat","find","Image","i","sort","Math","random","shuffle","array","t","m","length","floor","map","item","url","process","Card_Card","key","Header_Header","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kkCAgBeA,MAZf,SAAAC,GAAkC,IAAjBC,EAAiBD,EAAjBC,MAAOC,EAAUF,EAAVE,SAEpB,OACAC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,sBAAcJ,GAAaE,EAAAC,EAAAC,cAAA,2BAAmBH,aCM7CK,MAZjB,SAAAP,GAA4C,IAA7BQ,EAA6BR,EAA7BQ,IAAKC,EAAwBT,EAAxBS,GAAIR,EAAoBD,EAApBC,MAAOS,EAAaV,EAAbU,WAE3B,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOK,QAAS,kBAAMD,EAAWD,KAChDN,EAAAC,EAAAC,cAAA,OAAKO,IAAKH,EAAID,IAAKA,EAAKK,UAASJ,EAAIE,QAASV,MCChDa,SAAMC,OAAAC,EAAA,EAAAD,CAAOE,IACnBC,QAAQC,IAAI,UAAWL,OAwGRM,6MAnGbC,MAAQ,CACJJ,SACAhB,MAAO,EACPC,SAAU,KAWdoB,SAAW,WAmBT,OAdIC,EAAKF,MAAMpB,MAAQsB,EAAKF,MAAMnB,UAChCqB,EAAKC,SAAS,CAACtB,SAAUqB,EAAKF,MAAMpB,OAClC,WACAiB,QAAQC,IAAIM,KAAKJ,MAAMnB,YAI3BqB,EAAKF,MAAMJ,OAAOS,QAAQ,SAAAZ,GACxBA,EAAOa,MAAQ,IAEjBC,MAAK,yBAAAC,OAA0BN,EAAKF,MAAMpB,QAG1CsB,EAAKC,SAAS,CAACvB,MAAO,KACf,KAITS,WAAa,SAAAD,GACXc,EAAKF,MAAMJ,OAAOa,KAAK,SAACC,EAAOC,GAE7B,GAAID,EAAMtB,KAAOA,EAAI,CAGnB,GAAuB,IAApBQ,EAAOe,GAAGL,MAYX,OAXAV,EAAOe,GAAGL,OAEVJ,EAAKC,SACH,CAACvB,MAAQsB,EAAKF,MAAMpB,MAAQ,GAE5B,WACAiB,QAAQC,IAAIM,KAAKJ,MAAMpB,SAIzBsB,EAAKF,MAAMJ,OAAOgB,KAAK,kBAAMC,KAAKC,SAAW,MACtC,EAIPZ,EAAKD,iBAOfc,QAAU,SAACC,GAIL,IAHJ,IAAsBC,EAAGN,EAArBO,EAAIF,EAAMG,OAGHD,GAGLP,EAAIE,KAAKO,MAAMP,KAAKC,SAAWI,KAG/BD,EAAID,EAAME,GACVF,EAAME,GAAKF,EAAML,GACjBK,EAAML,GAAKM,EAMjB,OAJiBD,EAAMK,IAAI,SAACC,GACxB,IAAIC,EAAKC,mBAAyBF,EAAKnC,IACvC,OAAOL,EAAAC,EAAAC,cAACyC,EAAD,CAAMC,IAAKJ,EAAKlC,GAAIA,GAAIkC,EAAKlC,GAAID,IAAKoC,EAAKlC,WAAYa,EAAKb,mGA1ErEkB,MACE,0YA8EF,OACEzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2C,EAAD,CAAQ/C,MAAOwB,KAAKJ,MAAMpB,MAAOC,SAAUuB,KAAKJ,MAAMnB,WACtDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdmB,KAAKW,QAAQnB,YA5FJgC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3be03d6e.chunk.js","sourcesContent":["import React from 'react';\nimport './header.css'\n\n\nfunction Header({score, topScore}){\n    \n    return (\n    <div>\n        <header className=\"header\"> \n            <h2><span>Score: {score}</span><span> Top Score: {topScore}</span></h2>\n        \n        </header>\n    </div>\n    )\n  }\n\nexport default Header;","import React from 'react'\nimport './card.css'\n\nfunction Card({src, id, score, clickCount}) {\n\n    return (\n        <div className=\"card\" onClick={() => clickCount(id)}>\n        <img alt={id} src={src} data-id={id} onClick={score}></img>\n    </div>\n  );\n  \n\n\n}\n\n  export default Card","import React, {Component} from 'react';\nimport Images from './images.json'\nimport Header from './components/Header/Header'\nimport Card from './components/Card/Card'\nimport './App.css'\n\n\n//global array of images \nconst images = [...Images]\nconsole.log('images:', images)\n\n\n\nclass App extends Component {\n  state = {\n      Images,\n      score: 0,\n      topScore: 0,\n    \n  }\n\n  componentDidMount() {\n    alert(\n      \"\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tHow To Play\\n\\r Click on the different vegetables, but try not to click on the same vegetable more than once \\n\\n If your current score is higher than the current top score then you'll have the new top score \\n\\n If you get a score of 18 then you're a memory master!!\"\n      )\n  }\n\n  //function that resets the game \n  gameOver = () => {\n\n    /* at the end of the game if the score saved in state is larger than the topScore saved in state\n    set the topScore to be the score */\n\n    if (this.state.score > this.state.topScore) {\n      this.setState({topScore: this.state.score}, \n        function() {\n        console.log(this.state.topScore);\n      });\n    }\n    //reset the images count to 0\n    this.state.Images.forEach(images => {\n      images.count = 0;\n    });\n    alert(`Game Over :( \\nscore: ${this.state.score}`);\n\n    //reset the score to 0\n    this.setState({score: 0});\n    return true;\n  }\n  \n  //function that handles the clicks for each image, it takes in an id\n  clickCount = id => {\n    this.state.Images.find((Image, i) => {\n      // if an image with the id matches one in the JSON file full of images\n      if (Image.id === id) {\n\n        //if the image count is === 0 when it is clicked increase it \n        if(Images[i].count === 0){\n          Images[i].count += \n          //and set the score state + 1\n          this.setState(\n            {score : this.state.score + 1}, \n            \n            function(){\n            console.log(this.state.score);\n          });\n\n\n          this.state.Images.sort(() => Math.random() - 0.5)\n          return true; \n\n        } else {\n\n          this.gameOver();\n        }\n      }\n    });\n  }\n\n  //fisher-yates shuffle \nshuffle = (array) => {\n  var m = array.length, t, i;\n  \n      // While there remain elements to shuffle…\n      while (m) {\n    \n        // Pick a remaining element…\n        i = Math.floor(Math.random() * m--);\n    \n        // And swap it with the current element.\n        t = array[m];\n        array[m] = array[i];\n        array[i] = t;\n      }\n  const domArray = array.map((item) => {\n      let url =process.env.PUBLIC_URL + item.src;\n      return <Card key={item.id} id={item.id} src={url} clickCount={this.clickCount}/>\n  });    \n  return domArray;\n}\n  render () {\n    return (\n      <div>\n        <Header score={this.state.score} topScore={this.state.topScore} />\n        <div className=\"wrapper\">\n        {this.shuffle(Images)}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}